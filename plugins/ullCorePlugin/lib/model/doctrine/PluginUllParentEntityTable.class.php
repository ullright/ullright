<?php
/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class PluginUllParentEntityTable extends UllRecordTable
{

  /**
   * checks if a given UllUser is the given UllEntity or member of the given UllEntity
   * 
   * $user is optional, by default the logged in user is used.
   * 
   * @param UllEntity $entity
   * @param mixed $user         optional, = logged in user per default
   * @return string 'user' or 'group' if successful, null if user is not logged in
   */
  public static function has(UllEntity $entity, $user = null)
  {   
    if ($user === null)
    {
      $userId = sfContext::getInstance()->getUser()->getAttribute('user_id');
      
      if ($userId !== null)
      {
        $user = Doctrine::getTable('UllUser')->findOneById($userId);
      }
      else
      {
        return null;
      }
    }
    
    if (!$user instanceof UllUser)
    {
      throw new InvalidArgumentException('user must be a UllUser object');
    }
    
    if ($entity->type == 'user')
    {
      if ($entity->id == $user->id)
      {
        return 'user';
      }
    }
    elseif ($entity->type == 'group')
    {
      if (UllUserTable::hasGroup($entity->id, $user->id))
      {
        return 'group';
      }
    }
  }
  
  
  /**
   * Find by Id
   *
   * @param integer $id
   * @return UllEntity
   */
  public static function findById($id)
  {
    $q = new Doctrine_Query;
    $q
      ->from('UllEntity')
      ->where('id = ?', $id)
      ->useResultCache(true)
    ;
    
    return $q->fetchOne();
  }

  
  /**
   * Find UllEntity by display_name
   *
   * @param string $displayName
   * @return UllEntity
   */
  public static function findByDisplayName($displayName)
  {
    $q = new Doctrine_Query;
    $q
      ->from('UllEntity')
      ->where('display_name = ?', $displayName)
      ->useResultCache(true)
    ;
    
    return $q->fetchOne();    
  }
  
  
  /**
   * Find UllEntity->id by display_name
   *
   * @param string $displayName
   * @return integer
   */
  public static function findIdByDisplayName($displayName)
  {
    $entity = self::findByDisplayName($displayName);
    if ($entity)
    {
      return $entity->id;
    }
  }
  
  
  public static function getSubordinateTree2(UllEntity $entity, $hydrate = true)
  {
    $tree = array();
    
    $tree[$entity->id] = array(
      'data'      => ($hydrate) ? $entity : $entity->id,
      'meta'      => array(),
      'children'  => null,
    );
    
    if ($subordinates = $entity->getSubordinates())
    {
      $tree[$entity->id]['children'] = array();
      $markAsLeftMost = null;
      
      if (count($subordinates) > 1)
      {
        $markAsLeftMost = true;
      }
      
      foreach ($subordinates as $subordinate)
      {
//        var_dump('-----');
//        var_dump(self::getSubordinateTree($subordinate, $hydrate));
//        var_dump($tree[$entity->id]['children']);
        $tree[$entity->id]['children'] += self::getSubordinateTree($subordinate, $hydrate);
//        var_dump($tree[$entity->id]['children']); 

        if ($markAsLeftMost)
        {
          $tree[$entity->id]['children'][$subordinate->id]['meta']['leftmost'] = true;
          $markAsLeftMost = false;
        }
      }
      
      if (count($subordinates) > 1)
      {
        $tree[$entity->id]['children'][$subordinate->id]['meta']['rightmost'] = true;
      }
      
    }     

   return $tree;     
  }
  
  
  public static function getSubordinateTree(UllEntity $entity, $hydrate = true)
  {
    $node = new ullTreeNode(($hydrate) ? $entity : $entity->id);
    
    if ($subordinates = $entity->getSubordinates())
    {
      foreach ($subordinates as $subordinate)
      {
        $node->addSubnode(self::getSubordinateTree($subordinate, $hydrate));
      }
    }     
    
   return $node;     
  }  
  
  
}