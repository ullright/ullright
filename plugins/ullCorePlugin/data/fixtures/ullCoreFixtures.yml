UllUser:
  adminuser:
    id:                 1               # force id for admin
    first_name:         Master
    last_name:          Admin
    email:              admin@example.com
    name:               admin
    password:           21232f297a57a5a743894a0e4a801fc3
    creator_user_id:    1               # integer since the adminuser isn't created yet
    updator_user_id:    1               # integer since the adminuser isn't created yet
    namespace:          ullCore
    UllGroup:           [admingroup]    # many to many relations are given by array
  testuser:
    first_name:         Thomas
    last_name:          Test
    email:              test@example.com
    name:               test
    password:           098f6bcd4621d373cade4e832627b4f6
    Creator:            adminuser
    Updator:            adminuser
    UllGroup:           [helpdeskgroup]

   
UllGroup:
  admingroup:
    name:               MasterAdmins
    Creator:            adminuser
    Updator:            adminuser
    namespace:          ullCore    
  helpdeskgroup:
    name:               Helpdesk
    Creator:            adminuser
    Updator:            adminuser

UllColumnType:
  integer:
    class:        ullMetaWidgetInteger
    label:        Integer
    namespace:    ullCore
  string:
    class:        ullMetaWidgetString
    label:        String
    namespace:    ullCore
  datetime:
    class:        ullMetaWidgetDateTime
    label:        DateTime
    namespace:    ullCore
  email:
    class:        ullMetaWidgetEmail
    label:        Email
    namespace:    ullCore    

UllTableConfig:
#  user:
#    db_table_name: UllUser
#    sort_fields: last_name,first_name
#    search_fields: last_name,first_name,name
#    Translation:
#      en:
#        caption: All Users
#        description: List of all users
#      de:
#        caption: Alle Benutzer
#        description: Liste aller Benutzer
  test_tc_1:
    db_table_name: TestTable
    label: TestTableLabel
    description: TestTable for automated testing
#    sort_columns:
    search_columns: id, my_string, my_text
#    Translation:
#      en:
#        caption: All Tests
#        description: List of all tests

UllColumnConfig:
  test_cc_my_string:
    Translation:
      en:
        label:      My custom string label
      de:
        label:      Mein spezielles String Label
    db_table_name:  TestTable
    db_column_name: my_string
    enabled:        true
    show_in_list:   true
    
  test_cc_my_useless_column:
    db_table_name:  TestTable
    db_column_name: my_useless_column
    enabled:        false
    show_in_list:   true    
    
  test_cc_my_email:
    db_table_name:  TestTable
    db_column_name: my_email
    enabled:        true
    show_in_list:   true
    UllColumnType:  email     

# for tabletool testing
TestTable:
  tt_1:
    Translation:
      en: 
        my_string:    Foo Bar
        my_text:      Hello, this is my text
      de:
        my_string:    Foo Bar Deutsch
        my_text:    Hallo, das ist mein Text
    my_boolean:   true
    my_email:     foobar@example.com
    my_useless_column: bla
    UllUser:      adminuser
    namespace:    test
    Creator:      adminuser
    Updator:      adminuser
    #created_at:   2008-01-01 00:00:00 this doesn't work because the actas timestampable behaviour overwrites it
    
  tt_2:
    Translation:
      en:
        my_string:    Foo Bar More
        my_text:      Hello, this is more of my text
      de:
        my_string:    Foo Bar More Deutsch
        my_text:      Hallo, das ist mehr von meinem Text        
    my_boolean:   false
    my_email:     foobar.more@example.com
    my_useless_column: even more bla   
    UllUser:      testuser
    namespace:    test
    Creator:      adminuser
    Updator:      testuser
    #created_at:   2008-01-01 00:00:00
#<?php
#for ($i = 1; $i <= 100; $i++) 
#{
#  echo "  x_$i:\n";
#  echo "    my_string: blabla$i\n";
#}
#?>
