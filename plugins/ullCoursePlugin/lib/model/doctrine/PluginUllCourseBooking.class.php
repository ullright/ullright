<?php

/**
 * PluginUllCourseBooking
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class PluginUllCourseBooking extends BaseUllCourseBooking
{
  
  public function preInsert($event)
  {
    $this->updatePriceNegotiated();
  }
  
  /**
   * pre save hook
   */
  public function preSave($event)
  {
    // Fixes fixture loading. At the moment of loading UllCourseBookings
    // UllCourseTariffCourse is not loaded yet.
    if (Doctrine::getTable('UllCourseTariffCourse')->count())
    {
      UllCourseBookingTable::validateTarif($this);
    }
    
    $this->updatePaidAt();
    
    $this->updatePricePaid();
    
    $this->updateStatus();
  }

  /**
   * post save hook
   * 
   * @param unknown_type $event
   */
  public function postSave($event)
  {
    $this->UllCourse->updateProxies();    
  }
  
  /**
   * Send booking confirmation and payment information 
   */
  public function sendConfirmationMail()
  {
    // We cannot send emails without an email address
    if (!$this->UllUser->email)
    {
      return;
    }
    
    $mail = new ullsfMail('ull_course_booked');
    
    $mail->setFrom(
      sfConfig::get('app_ull_course_from_address'),
      sfConfig::get('app_ull_course_from_name')
    );
    $mail->addAddress($this->UllUser);

    $mail->usePartial('ullCourse/bookedMail', array(
      'booking' => $this
    ));
    
    $mail->send();
  }  
  
  
  /**
   * Default the negotiated price to the tariff's price
   */
  public function updatePriceNegotiated()
  {
    if (!$this->price_negotiated)
    {
      $this->price_negotiated = $this->UllCourseTariff->price;
    }
  }
  
  /**
   * Set the paid_at date when is_paid was modified
   */
  public function updatePaidAt()
  {
    $modified = $this->getModified();
    
    if (!isset($modified['is_paid']))
    {
      return;
    }
    
    if (true === $modified['is_paid'])
    {
      $this->paid_at = date('Y-m-d H:i:s');
    }
    if (false === $modified['is_paid'])
    {
      $this->paid_at = null;
    }    
  }
  
  /**
   * Default the price_paid if not set manually
   */
  public function updatePricePaid()
  {
    if ($this->is_paid && !$this->price_paid)
    {
      $this->price_paid = $this->UllCourseTariff->price;
    }    
  }  
  
  /**
   * Update the human readable UllCourseBookingStatus depending on the booking data
   */
  public function updateStatus()
  {
    if (!$this->is_active)
    {
      $this->UllCourseBookingStatus = $this->findStatus('deleted');
      
      return;
    }
    
    if ($this->is_paid && $this->price_paid < $this->UllCourseTariff->price)
    {
      $this->UllCourseBookingStatus = $this->findStatus('underpaid');
      
      return;      
    }
    
    if ($this->is_supernumerary_paid)
    {
      $this->UllCourseBookingStatus = $this->findStatus('supernumerary-paid');
      
      return;      
    }
    
    if ($this->is_paid && $this->price_paid > $this->UllCourseTariff->price)
    {
      $this->UllCourseBookingStatus = $this->findStatus('overpaid');
      
      return;      
    }

    if ($this->is_supernumerary_booked)
    {
      $this->UllCourseBookingStatus = $this->findStatus('supernumerary-booked');
      
      return;      
    }

    if ($this->is_paid)
    {
      $this->UllCourseBookingStatus = $this->findStatus('paid');
      
      return;      
    }      
    
    // default
    $this->UllCourseBookingStatus = $this->findStatus('booked');
  }
  
  /**
   * Helper shortcut method to get an UllCourseStatus by slug
   * 
   * @param string $slug
   */
  protected function findStatus($slug)
  {
    return Doctrine::getTable('UllCourseBookingStatus')->findOneBySlug($slug);
  }  
}